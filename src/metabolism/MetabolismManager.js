/**
 * üß¨ MetabolismManager - Coordenador do Metabolismo Informacional
 * 
 * Sistema central que coordena an√°lise, detec√ß√£o de padr√µes e gera√ß√£o de insights
 * 
 * @author Microbioma Digital Team
 * @version 0.1.0
 */
import { LoggerStatic as Logger } from '../utils/Logger.js';
import ConversationAnalyzer from './ConversationAnalyzer.js';
import PatternDetector from './PatternDetector.js';

class MetabolismManager {
    constructor(config = {}) {
        this.config = {
            autoAnalysis: config.autoAnalysis !== false,
            analysisInterval: config.analysisInterval || 30000, // 30 segundos
            batchSize: config.batchSize || 10,
            enableRealTime: config.enableRealTime !== false,
            ...config
        };
        
        this.analyzer = null;
        this.patternDetector = null;
        this.isRunning = false;
        this.analysisQueue = [];
        this.processingQueue = false;
        this.analysisTimer = null;
        
        Logger.info('üß¨ MetabolismManager inicializado');
    }

    /**
     * Inicializa o sistema de metabolismo
     */
    async initialize() {
        try {
            Logger.info('üß¨ Inicializando sistema de metabolismo...');
            
                                    // Inicializar ConversationAnalyzer
                        this.analyzer = new ConversationAnalyzer(this.config);
                        
                        // Inicializar PatternDetector
                        this.patternDetector = new PatternDetector(this.config);
            
            // Iniciar processamento autom√°tico se habilitado
            if (this.config.autoAnalysis) {
                await this.startAutoAnalysis();
            }
            
            Logger.info('‚úÖ Sistema de metabolismo inicializado com sucesso');
            
        } catch (error) {
            Logger.error('‚ùå Erro ao inicializar metabolismo:', error);
            throw error;
        }
    }

    /**
     * Inicia an√°lise autom√°tica
     */
    async startAutoAnalysis() {
        if (this.isRunning) {
            Logger.warn('‚ö†Ô∏è An√°lise autom√°tica j√° est√° rodando');
            return;
        }
        
        this.isRunning = true;
        this.analysisTimer = setInterval(async () => {
            await this.processAnalysisQueue();
        }, this.config.analysisInterval);
        
        Logger.info('üîÑ An√°lise autom√°tica iniciada');
    }

    /**
     * Para an√°lise autom√°tica
     */
    async stopAutoAnalysis() {
        if (this.analysisTimer) {
            clearInterval(this.analysisTimer);
            this.analysisTimer = null;
        }
        
        this.isRunning = false;
        Logger.info('‚èπÔ∏è An√°lise autom√°tica parada');
    }

    /**
     * Adiciona conversa para an√°lise
     */
    async addConversationForAnalysis(conversation) {
        try {
            if (!conversation || !conversation.id) {
                Logger.warn('‚ö†Ô∏è Conversa inv√°lida para an√°lise');
                return false;
            }
            
            // Verificar se j√° foi analisada
            if (this.analyzer.getCachedAnalysis(conversation.id)) {
                Logger.info(`‚ÑπÔ∏è Conversa ${conversation.id} j√° foi analisada`);
                return true;
            }
            
            // Adicionar √† fila de an√°lise
            this.analysisQueue.push({
                conversation,
                timestamp: new Date().toISOString(),
                priority: this.calculatePriority(conversation)
            });
            
            // Ordenar fila por prioridade
            this.sortQueueByPriority();
            
            Logger.info(`üì• Conversa ${conversation.id} adicionada √† fila de an√°lise`);
            
            // Processar imediatamente se habilitado
            if (this.config.enableRealTime && !this.processingQueue) {
                await this.processAnalysisQueue();
            }
            
            return true;
            
        } catch (error) {
            Logger.error('‚ùå Erro ao adicionar conversa para an√°lise:', error);
            return false;
        }
    }

    /**
     * Processa fila de an√°lise
     */
    async processAnalysisQueue() {
        if (this.processingQueue || this.analysisQueue.length === 0) {
            return;
        }
        
        this.processingQueue = true;
        
        try {
            Logger.info(`üîÑ Processando ${this.analysisQueue.length} conversas na fila de an√°lise`);
            
            const batch = this.analysisQueue.splice(0, this.config.batchSize);
            
            for (const item of batch) {
                try {
                    await this.analyzeConversation(item.conversation);
                    Logger.info(`‚úÖ Conversa ${item.conversation.id} analisada com sucesso`);
                } catch (error) {
                    Logger.error(`‚ùå Erro ao analisar conversa ${item.conversation.id}:`, error);
                    // Recolocar na fila com prioridade reduzida
                    item.priority = Math.max(0, item.priority - 1);
                    this.analysisQueue.push(item);
                }
            }
            
            // Reordenar fila ap√≥s processamento
            this.sortQueueByPriority();
            
            Logger.info(`‚úÖ Lote de an√°lise processado: ${batch.length} conversas`);
            
        } catch (error) {
            Logger.error('‚ùå Erro ao processar fila de an√°lise:', error);
        } finally {
            this.processingQueue = false;
        }
    }

    /**
     * Analisa conversa diretamente
     */
    async analyzeConversation(conversation) {
        try {
            if (!this.analyzer) {
                throw new Error('ConversationAnalyzer n√£o inicializado');
            }
            
            if (!this.patternDetector) {
                throw new Error('PatternDetector n√£o inicializado');
            }
            
            Logger.info(`üß¨ Analisando conversa: ${conversation.id}`);
            
            // An√°lise b√°sica com ConversationAnalyzer
            const basicAnalysis = await this.analyzer.analyzeConversation(conversation);
            
            // Detec√ß√£o de padr√µes avan√ßados com PatternDetector
            const advancedPatterns = await this.patternDetector.detectAdvancedPatterns(conversation, basicAnalysis);
            
            // Consolida√ß√£o dos resultados
            const consolidatedAnalysis = {
                conversationId: conversation.id,
                timestamp: new Date().toISOString(),
                basicAnalysis,
                advancedPatterns,
                metabolismVersion: '0.2.0'
            };
            
            Logger.info(`‚úÖ An√°lise completa conclu√≠da para conversa: ${conversation.id}`);
            return consolidatedAnalysis;
            
        } catch (error) {
            Logger.error('‚ùå Erro ao analisar conversa:', error);
            throw error;
        }
    }

    /**
     * Obt√©m an√°lise de conversa
     */
    async getConversationAnalysis(conversationId) {
        if (!this.analyzer) {
            return null;
        }
        
        // Tentar obter do cache primeiro
        let analysis = this.analyzer.getCachedAnalysis(conversationId);
        
        if (!analysis) {
            Logger.info(`üîç An√°lise n√£o encontrada em cache para ${conversationId}, analisando...`);
            
            // Buscar conversa do banco e analisar
            // TODO: Integrar com DatabaseManager para buscar conversa
            return null;
        }
        
        return analysis;
    }

    /**
     * Calcula prioridade de an√°lise para conversa
     */
    calculatePriority(conversation) {
        let priority = 1; // Prioridade base
        
        // Priorizar conversas mais recentes
        if (conversation.endTime) {
            const ageHours = (Date.now() - new Date(conversation.endTime).getTime()) / (1000 * 60 * 60);
            priority += Math.max(0, 10 - ageHours); // +10 para conversas muito recentes
        }
        
        // Priorizar conversas com mais mensagens
        if (conversation.messages && conversation.messages.length > 0) {
            priority += Math.min(5, conversation.messages.length / 10); // +5 para conversas longas
        }
        
        // Priorizar conversas com contexto t√©cnico
        if (conversation.context && conversation.context.project) {
            priority += 2; // +2 para conversas com contexto de projeto
        }
        
        return Math.min(10, priority); // M√°ximo de 10
    }

    /**
     * Ordena fila por prioridade
     */
    sortQueueByPriority() {
        this.analysisQueue.sort((a, b) => b.priority - a.priority);
    }

    /**
     * Obt√©m estat√≠sticas do metabolismo
     */
    async getMetabolismStats() {
        const analyzerStats = this.analyzer ? this.analyzer.getAnalysisStats() : {};
        const patternStats = this.patternDetector ? this.patternDetector.getPatternStats() : {};
        
        return {
            isRunning: this.isRunning,
            queueSize: this.analysisQueue.length,
            processingQueue: this.processingQueue,
            autoAnalysis: this.config.autoAnalysis,
            analysisInterval: this.config.analysisInterval,
            batchSize: this.config.batchSize,
            analyzer: analyzerStats,
            patternDetector: patternStats,
            metabolismVersion: '0.2.0'
        };
    }

    /**
     * Obt√©m insights consolidados
     */
    async getConsolidatedInsights(limit = 20) {
        if (!this.analyzer) {
            return [];
        }
        
        // TODO: Implementar consolida√ß√£o de insights de m√∫ltiplas conversas
        // Por enquanto, retorna estat√≠sticas b√°sicas
        return {
            totalConversations: this.analyzer.getAnalysisStats().totalAnalyses,
            queueStatus: {
                pending: this.analysisQueue.length,
                processing: this.processingQueue
            },
            systemStatus: {
                running: this.isRunning,
                autoAnalysis: this.config.autoAnalysis
            }
        };
    }

    /**
     * Limpa cache e filas
     */
    async clearCache() {
        if (this.analyzer) {
            this.analyzer.clearCache();
        }
        
        this.analysisQueue = [];
        Logger.info('üßπ Cache e filas de metabolismo limpos');
    }

    /**
     * Para o sistema de metabolismo
     */
    async stop() {
        try {
            await this.stopAutoAnalysis();
            
            // Limpar filas
            this.analysisQueue = [];
            this.processingQueue = false;
            
            Logger.info('‚úÖ Sistema de metabolismo parado com sucesso');
            
        } catch (error) {
            Logger.error('‚ùå Erro ao parar metabolismo:', error);
            throw error;
        }
    }

    /**
     * Reinicia o sistema de metabolismo
     */
    async restart() {
        try {
            Logger.info('üîÑ Reiniciando sistema de metabolismo...');
            
            await this.stop();
            await this.initialize();
            
            Logger.info('‚úÖ Sistema de metabolismo reiniciado com sucesso');
            
        } catch (error) {
            Logger.error('‚ùå Erro ao reiniciar metabolismo:', error);
            throw error;
        }
    }
}

export default MetabolismManager;
